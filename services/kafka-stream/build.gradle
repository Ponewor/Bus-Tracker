apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

ext {
    javaMainClass = "stream.Main"
}

application {
    mainClassName = javaMainClass
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'org.apache.kafka:kafka-streams:+'
    implementation 'org.apache.lucene:lucene-spatial:5.5.5'
    implementation 'org.slf4j:slf4j-simple:1.7.9'
//     implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.31'
//     implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
//     implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'
//     implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.1'
}

task runFinalJar(type: JavaExec) {
   classpath = files('build/libs/kafka-stream-0.1.0.jar')
   classpath += sourceSets.main.runtimeClasspath
   main = javaMainClass
}

jar {
    baseName = 'kafka-stream'
    version =  '0.1.0'
    manifest {
    attributes(
//         "Manifest-Version": "1.0",
//       "Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '),
      'Main-Class': javaMainClass
    )
//     from {
//     configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//   }
//    {
//     exclude "META-INF/*.SF"
//     exclude "META-INF/*.DSA"
//     exclude "META-INF/*.RSA"
//   }
//   with jar
//     from configurations.runtimeClasspath.collect { it.getName() }.join(' ')


  }
}

task fatJar(type: Jar) {
  manifest.from jar.manifest
  classifier = 'all'
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    duplicatesStrategy = DuplicatesStrategy.INHERIT
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    exclude "*LICENSE*"
    exclude "*NOTICE*"
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE.txt"
    exclude "META-INF/*"
    exclude "META-INF/services/org.apache.lucene.codecs.DocValuesFormat"
    exclude "module-info.class"
  }
  with jar
}

artifacts {
    archives fatJar
}
